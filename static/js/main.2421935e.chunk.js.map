{"version":3,"sources":["components/Filter/Filter.module.scss","components/Container/Container.module.scss","components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Container/Container.js","components/Layout/Layout.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/App.js","index.js"],"names":["module","exports","Container","children","className","styles","container","Layout","INITIAL_STATE","name","number","ContactForm","state","nameInputId","shortid","generate","numberInputId","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","onSubmit","reset","this","Form","htmlFor","Label","LabelText","id","type","onChange","placeholder","pattern","title","maxLength","Input","Button","Component","Filter","required","onDeleteContact","onClick","ContactItem","Contact","ContactName","ContactList","contacts","length","map","App","filter","addContact","contact","find","alert","trim","changeFilter","getVisibleContacts","normalizedFilter","toLowerCase","includes","getVisibleContactsSortByName","sort","a","b","nameA","toUpperCase","nameB","deleteContact","contactId","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2421935e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Filter_Label__2jQ6S\",\"LabelText\":\"Filter_LabelText__33li-\",\"Input\":\"Filter_Input__34uam\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1_04p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__8wH7B\",\"Label\":\"ContactForm_Label__2zWew\",\"LabelText\":\"ContactForm_LabelText__2f866\",\"Input\":\"ContactForm_Input__3Btlx\",\"Button\":\"ContactForm_Button__3LAeY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__3O6UG\",\"ContactItem\":\"ContactList_ContactItem__2AfwX\",\"Contact\":\"ContactList_Contact__2-inE\",\"ContactName\":\"ContactList_ContactName__qEMIi\",\"Button\":\"ContactList_Button__1tpjR\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Container.module.scss';\n\nconst Container = ({ children }) => (\n  <div className={styles.container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Container from '../Container';\n\nconst Layout = ({ children }) => <Container>{children}</Container>;\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport styles from './ContactForm.module.scss';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = { ...INITIAL_STATE };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const { name, number } = this.state;\n\n    this.props.onSubmit({ ...this.state });\n\n    if ((!name && number) || (name && !number)) {\n      return;\n    }\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.Form}>\n        <label htmlFor={this.nameInputId} className={styles.Label}>\n          <span className={styles.LabelText}>Name</span>\n          <input\n            id={this.nameInputId}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={this.handleChange}\n            placeholder=\"Enter name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            // required\n            maxLength=\"40\"\n            className={styles.Input}\n          />\n        </label>\n\n        <label htmlFor={this.numberInputId} className={styles.Label}>\n          <span className={styles.LabelText}>Number</span>\n          <input\n            id={this.numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            placeholder=\"Enter number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            // required\n            maxLength=\"18\"\n            className={styles.Input}\n          />\n        </label>\n\n        <button type=\"submit\" className={styles.Button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","// import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.scss';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className={styles.Label}>\n      <span className={styles.LabelText}>Find contacts by name</span>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={value}\n        onChange={onChange}\n        placeholder=\"Enter name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        className={styles.Input}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","// import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.scss';\n\nconst Button = ({ onDeleteContact }) => (\n  <button onClick={onDeleteContact} className={styles.Button}>\n    Delete\n  </button>\n);\n\nconst ContactItem = ({ name, number, onDeleteContact }) => (\n  <li className={styles.ContactItem}>\n    <p className={styles.Contact}>\n      <span className={styles.ContactName}>{name}:</span> {number}\n    </p>\n    <Button onDeleteContact={onDeleteContact} />\n  </li>\n);\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  if (contacts.length === 0) return null;\n  return (\n    <ul className={styles.ContactList}>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          name={name}\n          number={number}\n          onDeleteContact={() => onDeleteContact(id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\n\nimport Layout from '../components/Layout';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\n\nimport shortid from 'shortid';\n\nimport './App.module.scss';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  addContact = ({ name, number }) => {\n    const { contacts } = this.state;\n\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    if (contacts.find(contact => contact.number === number)) {\n      alert(`Number ${number} is already in contacts`);\n      return;\n    }\n\n    if ((!name || name.trim() === '') && (!number || number.trim() === '')) {\n      alert('Fill in the fields \"Name\" and \"Number\"');\n      return;\n    }\n\n    if (!name || name.trim() === '') {\n      alert('Field \"Name\" is empty');\n      return;\n    }\n\n    if (!number || number.trim() === '') {\n      alert('Field \"Number\" is empty');\n      return;\n    }\n\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  getVisibleContactsSortByName = () => {\n    const visibleContacts = this.getVisibleContacts();\n\n    const visibleContactsSortByName = visibleContacts.sort((a, b) => {\n      const nameA = a.name.toUpperCase();\n      const nameB = b.name.toUpperCase();\n\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      return 0;\n    });\n\n    return visibleContactsSortByName;\n  };\n\n  deleteContact = contactId => {\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    const filteredContacts = this.getVisibleContactsSortByName();\n\n    return (\n      <Layout>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}